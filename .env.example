# =====================================
# CodeRoutine App - Environment Configuration Template
# =====================================
#
# Copy this file to .env and configure with your actual values
# cp .env.example .env
#
# IMPORTANT: Never commit your actual .env file to version control!

# =====================================
# API Configuration
# =====================================

# Your backend API base URL
# This should point to your deployed Cloud Functions or custom backend
EXPO_PUBLIC_API_BASE_URL=https://your-region-your-project.cloudfunctions.net/your-api-function

# Access token for API authentication
# Generate a secure random token (recommended: 32+ characters)
# You can use: openssl rand -hex 32
EXPO_PUBLIC_ACCESS_TOKEN=your-secure-access-token-here-replace-with-actual-token

# =====================================
# RevenueCat Configuration (Optional)
# =====================================
# Required only if you want to implement subscription features
# Get these from: https://app.revenuecat.com/ > Project Settings > API Keys

# Apple App Store API Key (starts with "appl_")
EXPO_PUBLIC_REVENUECAT_APPLE_API_KEY=appl_your_apple_api_key_here

# Google Play Store API Key (starts with "goog_")
EXPO_PUBLIC_REVENUECAT_GOOGLE_API_KEY=goog_your_google_api_key_here

# =====================================
# Development Settings (Optional)
# =====================================

# Set to 'true' to use local API during development
# When true, API calls will go to http://localhost:8080
EXPO_PUBLIC_USE_LOCAL_API=false

# =====================================
# Firebase Configuration
# =====================================
# Your Firebase configuration is handled via google-services.json (Android)
# and GoogleService-Info.plist (iOS) files. These files should be:
# 1. Downloaded from your Firebase project console
# 2. Placed in the appropriate platform directories
# 3. NOT committed to version control (they're in .gitignore)

# =====================================
# Setup Instructions
# =====================================
#
# 1. Backend Setup:
#    - Deploy the Cloud Functions from the functions/ directory
#    - Or implement your own backend API with the required endpoints
#    - Update EXPO_PUBLIC_API_BASE_URL with your API URL
#
# 2. Access Token:
#    - Generate a secure random token
#    - Use the same token in your backend configuration
#    - Update EXPO_PUBLIC_ACCESS_TOKEN
#
# 3. Firebase Setup:
#    - Create a new Firebase project at https://console.firebase.google.com
#    - Enable Firestore Database
#    - Download google-services.json (Android) and GoogleService-Info.plist (iOS)
#    - Place these files in the appropriate directories
#
# 4. RevenueCat Setup (Optional):
#    - Create account at https://revenuecat.com
#    - Create a new project
#    - Get API keys from Project Settings
#    - Update the RevenueCat configuration above
#
# 5. Development:
#    - Copy this file: cp .env.example .env
#    - Update all placeholder values with your actual configuration
#    - Run: npm install
#    - Run: npx expo start
#
# =====================================
# Security Notes
# =====================================
#
# - Never commit your .env file to version control
# - Use different tokens for development and production
# - Rotate tokens regularly
# - Keep API keys secure and don't share them
# - Use environment-specific configurations for different deployments
#
# =====================================
# Troubleshooting
# =====================================
#
# If you see "Access token not configured" error:
# - Make sure you've copied .env.example to .env
# - Verify EXPO_PUBLIC_ACCESS_TOKEN is set in your .env file
# - Ensure your backend is using the same access token
#
# If API calls fail:
# - Check EXPO_PUBLIC_API_BASE_URL is correct
# - Verify your backend is deployed and accessible
# - Check network connectivity
# - Look at console logs for detailed error messages
#
# If RevenueCat features don't work:
# - Verify API keys are correct and start with "appl_" or "goog_"
# - Check that RevenueCat is properly configured in your app stores
# - Ensure you're testing on a physical device (not simulator for purchases)